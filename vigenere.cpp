#include <iostream>
#include <string>
#include <cstdio>
#include <vector>
#include <map>

typedef std::map<std::string, std::vector<size_t>>		stringListFound;
typedef std::map<char, int>								letterFrequency;
typedef std::vector<char>								mostUsedLetters;

int gcd(int val1, int val2)
{
	if(val1 == 0) return(val2);
	else return(gcd(val2 % val1, val1));
}

bool hasValue(std::vector<size_t> vec, size_t val)
{
	bool hasVal = false;
	std::vector<size_t>::iterator it = vec.begin();

	while(!hasVal && (it != vec.end()))
	{
		hasVal = (val == *it);
		it++;
	}

	return(hasVal);
}

stringListFound searchForString(std::string text, int sz)
{
	stringListFound slf;

	for(size_t i = 0; i < text.length() - sz; i++)
	{
		size_t found = 0;
		std::string str = text.substr(i, sz);

		while((found = text.find(str, found)) != std::string::npos)
		{
			if(!hasValue(slf[str], found))
			{
				slf[str].push_back(found);
			}
			found += sz;
		}
		
		if(slf[str].size() < 2) slf.erase(str);
	}

	return(slf);
}

letterFrequency getLettersFrequency(std::string text)
{
	letterFrequency lFreq;

	for(size_t i = 0; i < text.size(); i++)
	{
		if(lFreq.find(text.at(i)) != lFreq.end())
		{
			lFreq[text.at(i)] += 1;
		}
		else
		{
			lFreq[text.at(i)] = 1;
		}
	}
	
	return(lFreq);
}

mostUsedLetters getMostUsedLetters(letterFrequency lFreq, int howMany)
{
	mostUsedLetters tMUL;

	for(int i = 0; i < howMany; i++)
	{
		letterFrequency::iterator it = lFreq.begin();
		for(letterFrequency::iterator it2 = lFreq.begin(); it2 != lFreq.end(); it2++)
		{
			if(it2->second >= it->second)
			{
				it = it2;
			}
		}

		tMUL.push_back(it->first);
		lFreq.erase(it);
	}

	return(tMUL);
}

char decriptLetter(mostUsedLetters mustUsedTextLetters, mostUsedLetters mustUsedLanguageLetters, std::string alphabet)
{
	int mUL = 0, chr = 0;
	std::map<int, int> operation;

	for(size_t i = 0; i < mustUsedTextLetters.size(); i++)
	{
		for(size_t j = 0; j < mustUsedLanguageLetters.size(); j++)
		{
			int ckeyt = alphabet.find(mustUsedTextLetters.at(i));
			int ckeyl = alphabet.find(mustUsedLanguageLetters.at(j));
			int key = (ckeyt - ckeyl) % alphabet.size();

			if(operation.find(key) != operation.end())
			{
				operation[key] += 1;
			}
			else
			{
				operation[key] = 1;
			}
		}
	}

	chr = operation.begin()->first;
	mUL = operation.begin()->second;

	for(std::map<int, int>::iterator it = operation.begin(); it != operation.end(); it++)
	{
		if(it->second >= mUL)
		{
			mUL = it->second;
			chr = it->first;
		}
	}
	return(alphabet.at(chr));
}

int main(int argc, char *argv[])
{
	std::string alphabet = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
	std::string encriptedText = "QZYYHFPIYXFGNIIHLJNAXAJSWKGBQPWWECHVEIWDNOMOWFNTXVHVTTRBRUYSEGAEEESOARQZYXSBNVNIXWVMLTRYHRNRTXJDFMEEIXGBOICRREAMEOQNTGXHELFTGAIFRNTRWWEEYEFTROMXRNXPHIWEVGHPIITUXEFXMOELSQXMEFMYIRJTJHVXESDEXPLXJDZTPHEWEGASDIYWBVSFRYRVXWSEILBGKMIJNFNWAIHTRWSQGWENMMYKYHRVSOIYHNMACIHKRWGPRYRVYYRIXAGBVLRXNNMEYDZRNGMFQJNEBGSQJNGYENMQIGRFFXSEIXVMIKOEXLLHFGBOICRREAMGZQJSBVPZWJTBVPLMRIAZVPWUOALMMMQIGRJZVFCLUICEYTNVOELJOEBKTRXOSMLPQTSGLSALNSGBGLXJDPRFPVFTGTGVWJVRKYYHJRGTOPRRALGSHFJCYXECFZTRQENXQYJAICIXUPAEEXFCXLJTXNNGAIFRNVRKWPSKWNKEYHKOEXMRRUOYBGJESDJAEEXMEVGXPVSAGBSYEQCBFQFRNTLPSFPICBGWTHJRNIVZTJREXWASSSRMSELJMVLWEMQLGAIDYGJRVXZJIEOTXPEUAEMMNYQAEECTQUOEMEYXVURLXTSSIFPLLXXOEMSQGDBRKEEXFCXBWELJEDNMGEQEAMSQEYRNWMEMTNNEECQJDNMXLGPESYSCXXTBTRDAJRGAEEUZEFMMZRMAIXGFPRIATXPHNNGAIXESUNESYMSTRKRLXNOATPWEBACIPTGFBYXXZGDBRKALVKAEXEWWTKAHAYEXTUXXLPQIAGQLRZAYPLTGMWVEPMIUUOEMDLJDYTXPVYHVLCPEWTUXXLPQIAGQLRZAYBWLRTNOBROMSGLXXLYYHBKMEEYIIXVPWYAGXQPRYOSMLPPFWBYECQJDPHRQPNCGTWTXWEYTXPWYOPRFPVBAEBXZJKEELEEXFCXXVDHJFRGHPVXAAWPPKFLRQTPVYSTNMOESCRHRSSBCLUICEYTNVODGFNOXGWEXSVYMPHFSNVXTSSSPHZPVJDHGHPVYHREEHWZCUTWLVREQTXEEHKFMLPXJRZTVXIIAGMENOMAFTTCIHIFXQPESIAZMYMSTRKRLXNOATPWEBNBMEWPHYOXVLXYAPDWCMXEGHXSIQEIXPZJFNNKQPHFTGTGVWFYFUVPXRIPAEPPFPEHJPWXOEHJNSRPHMICWHIRGGPESDREINXWIPTPPRLIAXICMSGNMXSIZSATZLPUOFMKCEIUNMIDGMOBEASSMAFUIPRXEEOMYKFSNMINLSIPTPPBUEEMXZXMETKSFTIRNYXTRLTUXXLPQIAGQLRZAYWIDTNTRMLTWURBZVPWXTUXMYXJRATXTSSAYVSXQZNVMCTWOUFMEEXMEOXKTRSIAZSQAMAGVSFPIBRTPZRLPEHGPWXSNRWNLFRYXWMEWRLTWPRNOEKIDIFRPAJPPQOJTXELJNNMMZRFLQXJPRXEHGMGIWSVMCDMSSGBXFXJFBKRLXNOATPDXWAGXKTGXTHWMPWNNJTWSMSGGHROGMECKIOMHTFMLLXNTJBPWXFKRTRZXMEEMSJIFRFMSRIYTETGEMTNBGGJFJRENPPWBHNMMDGJRGTMYWFYBUWPVAEELMDXMAGZSTRLFBKALVICBGZPRYIBGEWAFRSTVPANLYTPXSXTNEALCXBRVSXTQEZXREIIBLVCMIWWNKJLVJAVFIOEYKAHGVMSGBNXLRTPCHRPRYSPHQXYSIPTXTSSSNGHTRYEYEMRISCRZEELJRVGKNEUAOBPTXNEFTGEYFLYRXSEYSNEVPEIYOXMYKIOAXWLCXMVVLLIQCLUICEYTNVODGFNNBHTRRIYBXLVDCNFTLMLNFUYEGFNGAIELWENMSQERIYBXLVDRRLTZRXEFXVGIFSNVCMIWDRMICVJNGMLLXXDBPRCMLHGLMWPDBRVEFWJIGLHTJKIPNPEFTRQXVTRLOABQASXSVUPPXTIQXREMKYNVCMIWAGMENOJROXCZRIAFAEOSBOSTHZYGTFTCDPFRERGZRXTNGXTRJACKSQIXSBKMYXMEZTXSIRAGBGDESDRGKTRJEEBRRHJPNKXXISTNMXSIZNVOICWNTLHJXEIEVKETRUOEMYREQHBPIGIWIQXREMKIPTXTSSBRRSYHFSUTHZATFNWSFFYMVZLERTTEXEWPDBRGIPHJDGHIDGFLNMILGDBRKEEXFCXBRESFNNKQPHHOAYPTGYIACYYIFTPRGZRFNNMSDTTNFHVPHHYOXVNSSFYBGEGTNSXVPRHEVGXLPQIAGIDXTNVTYDENRSHVNIQTPHPQSWRRLXSEWEGHPOEYTRGHPIXTUTXLXYRVUYEMTNVLEASQIGBGLPSOGTPPKFLPHRNIUTGAIELWERLXLRIAEWWZJURBHJFWJDVGGCMRIATPWEBBRRSYHFRRTWZRFBYXHZYGTPEILVFNQVSXTJLYBRRESDCKIASSDRKEYGJOSMLPIAIQXRNIIOAMEATQYGHQTPNTNKCLRIIAMIWPNGRGGPSUEETXTSSSZBGSEJLNWHDXMAGMLPHNFSBGFPYYBYVPPNAOECEVFCVGKLRFTGTGVXTIGLWZYWCRWSPWSOGIVPGQUQXXSIZSRHJZXMEELSFVHEFMSHIFVRMSRIYHRKASEYHRVEWPXAPEILVROFTMNSKRRLTZRXIOBPTXDSUHATRLWUHJFRIEQMLPEHTVOMECTRCKSGMIEQMLPEHTBKWHMYHTNMOESCRFEJFJEAHYRLFNQMLPVJIFTPCIFDLTHPXJREXREMSTUXJZVROSMLPPFWBYECQJDPHRQPNCGLEJWRIPAEPPNTUHPOWRIYBXLVDCBFQLRIEELSCXMEVKGTZNLVTRDYUEEBSCWBHBHVOIWAGMENOXTUTXLQTUAMXZEBAEVVTQJAFVVTQNNNEPJVJSCHRDMGLRBRELJMRTREMRETHZPVSMRGXDGFNGKCESYAXXLPEWTVGXSIGEYBIQXMAGMLPVJAEXJPASAGBSYWHACTFWITFSBIWHNNTTGJFJRJXEASSWVMLELJSBILTWYIPTXTSSOSLXFBSEGUYENJFSKIJZTAFTGZQUUGXVDGNEAMMDXNNGAINSRPHMICWJCHKMECIIIBWTSSAGMLPYXNNMMZRFLVGWEMYUGXSQWYAAWECHXAAWXPGMNBESRCNNTTMELJRFUYCKRDAHXPWYHNMMQESAGMENOIORLREVJQHBVPWYENEXSXMEPHHPHTEFGXSEAEGHFPRJAEECLWFRGYYWESDGAICIFRRMIYWTFGASFWFNQLSQTJOCEIHLTCBNPOTZLYHJQEQEFLWZTMIFMMNEYEQLXCMPEFTCDGTNFMEYXNNRPLZHJSVZRPHMIFHAYWYUKGIEPNKRFEWAFRRBRLWYHRUEDMXFBKEYSAEYBRZXMEEPSCHXPBPICJZLPRFPVFTGTGVWFRRPMELNNGAICESGRHJXESYFMEEIXSBESYKFSGAIJHTNGVECINFGAIJKJTPTYRLY";
	
	stringListFound slf = searchForString(encriptedText, 10);
	std::vector<size_t> distance;

	for(stringListFound::iterator it = slf.begin(); it != slf.end(); it++)
	{
		for(size_t i = 0; i < it->second.size() - 1; i++)
		{
			size_t absVal = it->second.at(i + 1) - it->second.at(i);
			distance.push_back(absVal);
		}
	}

	size_t gcdVal = gcd(distance.at(0), distance.at(1));
	for(size_t i = 2; i < distance.size(); i++)
	{
		gcdVal = gcd(gcdVal, distance.at(i));
	}

	std::vector<std::string> encriptedBlocks(gcdVal, "");
	for(size_t i = 0; i < encriptedText.size(); i++)
	{
		encriptedBlocks.at(i % gcdVal) += encriptedText.at(i);
	}
	
	mostUsedLetters mostUsedChars;
	mostUsedChars.push_back('E');
	mostUsedChars.push_back('T');
	mostUsedChars.push_back('A');

	printf("Pass: ");
	for(size_t i = 0; i < gcdVal; i++)
	{
		mostUsedLetters tMUL = getMostUsedLetters(getLettersFrequency(encriptedBlocks.at(i)), 3);
		printf("%c", decriptLetter(tMUL, mostUsedChars, alphabet));
	}

	getchar();
	return(0);
} 